import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import io
import re
from collections import Counter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
    page_icon="üìä",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
st.markdown("""
–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel-—Ñ–∞–π–ª–∞:
1. –†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
2. –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –≥—Ä—É–±—ã—Ö –æ—à–∏–±–æ–∫
3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
4. –†–∞—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
5. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
""")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —á–∏—Å–µ–ª
def correct_number_format(value):
    if pd.isna(value):
        return None
    if isinstance(value, str):
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        value = value.replace(',', '.').strip()
        try:
            return float(value)
        except ValueError:
            return None
    try:
        return float(value)
    except:
        return None


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=['xlsx', 'xls'])

if uploaded_file is not None:
    try:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_excel(uploaded_file)

        st.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        for col in df.columns:
            df[col] = df[col].apply(correct_number_format)

        # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        numeric_columns = [col for col in df.columns if pd.api.types.is_numeric_dtype(df[col])]

        if not numeric_columns:
            st.error("–í —Ñ–∞–π–ª–µ –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        else:
            selected_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", numeric_columns)

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–∏–µ NaN
            data = df[selected_column].dropna().values
            n = len(data)

            st.info(f"–í –∫–æ–ª–æ–Ω–∫–µ '{selected_column}': {n} —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ {len(df)}")

            if n < 3:
                st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∏–Ω–∏–º—É–º 3 –∑–Ω–∞—á–µ–Ω–∏—è)")
            else:
                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {n} –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                st.info(f"–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö: –æ—Ç {min(data):.2f} –¥–æ {max(data):.2f}")

                # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                with st.expander("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
                    st.write("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
                    for i, val in enumerate(data, 1):
                        st.write(f"{i}: {val:.4f}")

                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
                tab1, tab2, tab3, tab4, tab5 = st.tabs([
                    "üìà –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    "üîç –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –æ—à–∏–±–æ–∫",
                    "üìè –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                    "üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞",
                    "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏"
                ])

                with tab1:
                    st.header("–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

                    # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
                    mean = np.mean(data)
                    median = np.median(data)
                    variance = np.var(data, ddof=1)
                    std_dev = np.std(data, ddof=1)
                    cv = (std_dev / mean) * 100 if mean != 0 else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                    skewness = stats.skew(data)
                    kurtosis = stats.kurtosis(data)


                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥—ã —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    def calculate_mode_from_histogram(data, bins=10):
                        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–æ–¥—É —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"""
                        # –°—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                        counts, bin_edges = np.histogram(data, bins=bins)

                        # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π)
                        modal_interval_idx = np.argmax(counts)
                        modal_interval = (bin_edges[modal_interval_idx], bin_edges[modal_interval_idx + 1])
                        modal_frequency = counts[modal_interval_idx]

                        # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –º–æ–¥—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
                        # Mo = L + (f_m - f_{m-1}) / ((f_m - f_{m-1}) + (f_m - f_{m+1})) * h
                        L = modal_interval[0]  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                        h = modal_interval[1] - modal_interval[0]  # –®–∏—Ä–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

                        # –ß–∞—Å—Ç–æ—Ç—ã —Å–æ—Å–µ–¥–Ω–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                        f_m = modal_frequency  # –ß–∞—Å—Ç–æ—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                        f_prev = counts[modal_interval_idx - 1] if modal_interval_idx > 0 else 0
                        f_next = counts[modal_interval_idx + 1] if modal_interval_idx < len(counts) - 1 else 0

                        # –í—ã—á–∏—Å–ª—è–µ–º –º–æ–¥—É
                        try:
                            mode_value = L + ((f_m - f_prev) / ((f_m - f_prev) + (f_m - f_next))) * h
                        except ZeroDivisionError:
                            # –ï—Å–ª–∏ –≤—Å–µ —á–∞—Å—Ç–æ—Ç—ã —Ä–∞–≤–Ω—ã, –±–µ—Ä–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                            mode_value = L + h / 2

                        return mode_value, modal_interval, modal_frequency


                    # –í—ã—á–∏—Å–ª—è–µ–º –º–æ–¥—É
                    mode_value, modal_interval, modal_frequency = calculate_mode_from_histogram(data)

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    col1, col2 = st.columns(2)

                    with col1:
                        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π", n)
                        st.metric("–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ", f"{mean:.4f}")
                        st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{median:.4f}")
                        st.metric("–ú–æ–¥–∞ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–∞—è)", f"{mode_value:.4f}")
                        st.info(f"–ú–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {modal_interval[0]:.2f} - {modal_interval[1]:.2f}")
                        st.info(f"–ß–∞—Å—Ç–æ—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {modal_frequency}")

                    with col2:
                        st.metric("–î–∏—Å–ø–µ—Ä—Å–∏—è", f"{variance:.4f}")
                        st.metric("–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{std_dev:.4f}")
                        st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏", f"{cv:.2f}%" if isinstance(cv, float) else cv)
                        st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏", f"{skewness:.4f}")
                        st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫—Å—Ü–µ—Å—Å–∞", f"{kurtosis:.4f}")


                with tab2:
                    st.header("–û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –≥—Ä—É–±—ã—Ö –æ—à–∏–±–æ–∫")

                    # –ö—Ä–∏—Ç–µ—Ä–∏–π –†–æ–º–∞–Ω–æ–≤—Å–∫–æ–≥–æ
                    confidence_level = st.slider("–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏ (%)", 90, 99, 95)
                    alpha = 1 - confidence_level / 100

                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ t-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    t_critical = stats.t.ppf(1 - alpha / 2, n - 2)
                    threshold = t_critical * std_dev

                    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–æ—Å–æ–≤
                    outliers = []

                    for i, value in enumerate(data):
                        if abs(value - mean) > threshold:
                            outliers.append((i, value))

                    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
                    if outliers:
                        outlier_indices = [idx for idx, val in outliers]
                        clean_data = np.delete(data, outlier_indices)

                        st.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(outliers)} –≤—ã–±—Ä–æ—Å–æ–≤:")
                        for idx, value in outliers:
                            st.write(f"–ò–Ω–¥–µ–∫—Å {idx + 1}: {value:.4f} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {abs(value - mean):.4f})")

                        st.success(f"–ü–æ—Å–ª–µ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(clean_data)} –∑–Ω–∞—á–µ–Ω–∏–π")

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        mean_clean = np.mean(clean_data)
                        std_dev_clean = np.std(clean_data, ddof=1)

                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("–°—Ä–µ–¥–Ω–µ–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏", f"{mean:.4f}")
                            st.metric("–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏", f"{mean_clean:.4f}")
                        with col2:
                            st.metric("–°–ö–û –¥–æ –æ—á–∏—Å—Ç–∫–∏", f"{std_dev:.4f}")
                            st.metric("–°–ö–û –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏", f"{std_dev_clean:.4f}")
                    else:
                        st.success("–ì—Ä—É–±—ã–µ –æ—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                        clean_data = data
                        mean_clean = mean
                        std_dev_clean = std_dev

                with tab3:
                    st.header("–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π")

                    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    conf_level = st.slider("–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)", 90, 99, 95, key="conf_int")
                    alpha_conf = 1 - conf_level / 100

                    t_critical_conf = stats.t.ppf(1 - alpha_conf / 2, len(clean_data) - 1)
                    margin_error = t_critical_conf * std_dev_clean / np.sqrt(len(clean_data))

                    lower_bound = mean_clean - margin_error
                    upper_bound = mean_clean + margin_error

                    st.info(f"–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ({conf_level}%): "
                            f"[{lower_bound:.4f}, {upper_bound:.4f}]")
                    st.info(f"–¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è: ¬±{margin_error:.4f}")

                    # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    st.subheader("–†–∞—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π")

                    desired_error = st.number_input("–ñ–µ–ª–∞–µ–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è:",
                                                    min_value=0.001,
                                                    value=float(0.1 * std_dev_clean),
                                                    format="%.4f")

                    if desired_error > 0:
                        required_n = ((t_critical_conf * std_dev_clean) / desired_error) ** 2
                        st.metric("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π", f"{int(np.ceil(required_n))}")

                with tab4:
                    st.header("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –º–æ–¥–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º")

                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                    k = int(1 + 3.322 * np.log10(len(clean_data)))
                    n_bins = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã", 5, 20, min(k, 12))

                    fig, ax = plt.subplots(figsize=(8, 5))

                    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
                    counts, bin_edges, patches = ax.hist(clean_data, bins=n_bins, alpha=0.7,
                                                         edgecolor='black', density=False,
                                                         color='lightblue')

                    # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –≤—ã—á–∏—Å–ª—è–µ–º –º–æ–¥—É
                    modal_interval_idx = np.argmax(counts)
                    modal_interval = (bin_edges[modal_interval_idx], bin_edges[modal_interval_idx + 1])
                    modal_frequency = counts[modal_interval_idx]

                    # –í—ã—á–∏—Å–ª—è–µ–º –º–æ–¥—É –ø–æ —Ñ–æ—Ä–º—É–ª–µ
                    L = modal_interval[0]  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                    h = modal_interval[1] - modal_interval[0]  # –®–∏—Ä–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

                    # –ß–∞—Å—Ç–æ—Ç—ã —Å–æ—Å–µ–¥–Ω–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                    f_m = modal_frequency
                    f_prev = counts[modal_interval_idx - 1] if modal_interval_idx > 0 else 0
                    f_next = counts[modal_interval_idx + 1] if modal_interval_idx < len(counts) - 1 else 0

                    # –í—ã—á–∏—Å–ª—è–µ–º –º–æ–¥—É
                    try:
                        mode_value = L + ((f_m - f_prev) / ((f_m - f_prev) + (f_m - f_next))) * h
                    except ZeroDivisionError:
                        mode_value = L + h / 2  # –°–µ—Ä–µ–¥–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –µ—Å–ª–∏ –≤—Å–µ —á–∞—Å—Ç–æ—Ç—ã —Ä–∞–≤–Ω—ã

                    # –í—ã–¥–µ–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ü–≤–µ—Ç–æ–º
                    patches[modal_interval_idx].set_facecolor('red')
                    patches[modal_interval_idx].set_alpha(0.8)
                    patches[modal_interval_idx].set_edgecolor('darkred')
                    patches[modal_interval_idx].set_linewidth(2)

                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    ax.annotate(f'–ú–û–î–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–†–í–ê–õ\n–ß–∞—Å—Ç–æ—Ç–∞: {modal_frequency}',
                                xy=(bin_edges[modal_interval_idx] + h / 2, modal_frequency),
                                xytext=(0, 25),
                                textcoords='offset points',
                                ha='center', va='bottom',
                                fontsize=6, color='darkred', weight='bold',
                                bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.7),
                                arrowprops=dict(arrowstyle='->', color='darkred', lw=2))

                    # –û—Ç–º–µ—á–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—É—é –º–æ–¥—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π
                    ax.axvline(mode_value, color='red', linestyle='-', linewidth=3,
                               label=f'–ú–æ–¥–∞: {mode_value:.2f}')

                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥—ã
                    ax.annotate(f'–ú–æ–¥–∞ = {mode_value:.2f}',
                                xy=(mode_value, modal_frequency * 0.8),
                                xytext=(10, 0),
                                textcoords='offset points',
                                ha='left', va='center',
                                fontsize=6, color='red', weight='bold',
                                bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))

                    # –ü–æ–ª–∏–≥–æ–Ω —á–∞—Å—Ç–æ—Ç
                    bin_centers = 0.5 * (bin_edges[:-1] + bin_edges[1:])
                    ax.plot(bin_centers, counts, 'ro-', linewidth=2, markersize=6,
                            label='–ü–æ–ª–∏–≥–æ–Ω —á–∞—Å—Ç–æ—Ç', color='darkred')

                    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –º–µ–¥–∏–∞–Ω—ã
                    ax.axvline(mean_clean, color='blue', linestyle='--', linewidth=2,
                               label=f'–°—Ä–µ–¥–Ω–µ–µ: {mean_clean:.2f}')
                    ax.axvline(median, color='green', linestyle='--', linewidth=2,
                               label=f'–ú–µ–¥–∏–∞–Ω–∞: {median:.2f}')

                    # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∫—Ä–∏–≤–∞—è
                    x = np.linspace(min(clean_data), max(clean_data), 100)
                    pdf = stats.norm.pdf(x, mean_clean, std_dev_clean) * len(clean_data) * h
                    ax.plot(x, pdf, 'k-', label='–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', linewidth=2, alpha=0.7)

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
                    for i, (count, patch) in enumerate(zip(counts, patches)):
                        if count > 0:
                            ax.text(patch.get_x() + patch.get_width() / 2, count + 0.1,
                                    f'{int(count)}', ha='center', va='bottom',
                                    fontsize=6, color='black', weight='bold')

                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                    ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ', fontsize=5, weight='bold')
                    ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞', fontsize=5, weight='bold')
                    ax.set_title('–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º –º–æ–¥–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º',
                                 fontsize=5, weight='bold', pad=20)

                    # –õ–µ–≥–µ–Ω–¥–∞ —Å —Ñ–æ—Ä–º—É–ª–æ–π –º–æ–¥—ã
                    from matplotlib.offsetbox import AnchoredText

                    formula_text = f"Mo = L + (f‚Çò - f‚Çò‚Çã‚ÇÅ)/((f‚Çò - f‚Çò‚Çã‚ÇÅ) + (f‚Çò - f‚Çò‚Çä‚ÇÅ)) √ó h\n"
                    formula_text += f"= {L:.2f} + ({f_m}-{f_prev})/(({f_m}-{f_prev}) + ({f_m}-{f_next})) √ó {h:.2f}"
                    anchored_text = AnchoredText(formula_text, loc='upper right',
                                                 frameon=True, prop=dict(size=4))
                    ax.add_artist(anchored_text)

                    ax.legend(loc='upper left', fontsize=5)
                    ax.grid(True, alpha=0.3)
                    ax.set_axisbelow(True)

                    st.pyplot(fig, use_container_width=True)

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
                    st.subheader("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ")

                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("–ú–æ–¥–∞", f"{mode_value:.4f}")
                    with col2:
                        st.metric("–ú–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", f"{modal_interval[0]:.2f} - {modal_interval[1]:.2f}")
                    with col3:
                        st.metric("–ß–∞—Å—Ç–æ—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞", f"{modal_frequency}")
                    with col4:
                        st.metric("–®–∏—Ä–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞", f"{h:.2f}")

                    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ —Å–æ—Å–µ–¥–Ω–∏—Ö
                    st.subheader("üìä –ß–∞—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤–æ–∫—Ä—É–≥ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ")

                    modal_table_data = []
                    for i in range(max(0, modal_interval_idx - 2), min(len(counts), modal_interval_idx + 3)):
                        interval_label = f"{bin_edges[i]:.2f} - {bin_edges[i + 1]:.2f}"
                        is_modal = "‚úÖ" if i == modal_interval_idx else ""
                        modal_table_data.append({
                            '–ò–Ω—Ç–µ—Ä–≤–∞–ª': interval_label,
                            '–ß–∞—Å—Ç–æ—Ç–∞': int(counts[i]),
                            '–ú–æ–¥–∞–ª—å–Ω—ã–π': is_modal
                        })

                    modal_df = pd.DataFrame(modal_table_data)
                    st.dataframe(modal_df, use_container_width=True)

                with tab5:
                    st.header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")

                    # –¢–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞
                    if len(clean_data) >= 3 and len(clean_data) <= 5000:
                        stat, p_value = stats.shapiro(clean_data)

                        col1, col2 = st.columns(2)

                        with col1:
                            st.metric("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞", f"{stat:.4f}")
                            st.metric("p-value", f"{p_value:.6f}")

                        with col2:
                            alpha_norm = 0.05
                            if p_value > alpha_norm:
                                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é")
                            else:
                                st.error("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é")

                        # Q-Q plot
                        st.subheader("Q-Q –≥—Ä–∞—Ñ–∏–∫")

                        fig_qq, ax_qq = plt.subplots(figsize=(6, 4))
                        stats.probplot(clean_data, dist="norm", plot=ax_qq)
                        ax_qq.set_title('Q-Q –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏')
                        st.pyplot(fig_qq, use_container_width=False)

                    else:
                        st.warning("–¢–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç 3 –¥–æ 5000 –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

                    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                    st.info("""
                    **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
                    - **p-value > 0.05**: –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    - **Q-Q –≥—Ä–∞—Ñ–∏–∫**: —Ç–æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –ª–µ–∂–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏
                    - **–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞**: —Ñ–æ—Ä–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–ª–æ–∫–æ–ª–æ–æ–±—Ä–∞–∑–Ω–æ–π
                    """)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        import traceback

        st.text(traceback.format_exc())

else:
    st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")